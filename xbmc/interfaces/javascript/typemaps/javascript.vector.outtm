<%
/*
 *      Copyright (C) 2012 Team XBMC
 *      http://www.xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */
%>
<%
    matcher = type =~ /std::vector<\((.*)\)>/
    vectype = matcher[0][1]
    boolean ispointer = swigTypeParser.SwigType_ispointer(type)
    String accessor = ispointer ? '->' : '.'
    seq = sequence.increment()
%>

    ${result} = Array::New();
<%
    if (ispointer)
    {
%>
    if (${api} != NULL)
    { 
<%  }  %>
      for (std::vector<${vectype}>::const_iterator iter = ${api}${accessor}begin(); iter != ${api}${accessor}end(); ++iter)
      {
        const ${swigTypeParser.SwigType_str(swigTypeParser.SwigType_ltype(vectype))}& entry${seq} = *iter;
        Local<Value> jsentry${seq};
        ${helper.getOutConversion(vectype,'result',method,[ 'result' : 'jsentry' + seq, 'api' : 'entry' + seq, 'sequence' : sequence ])}
        ${result}->Set(${seq}, jsentry${seq});
      }
<%
    if (ispointer)
    {
%>
    }
<%  }  %>
